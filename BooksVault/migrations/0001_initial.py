# Generated by Django 4.2.11 on 2025-03-06 02:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("biography", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Publisher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("address", models.URLField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("ISBN", models.CharField(max_length=13)),
                ("num_of_pages", models.IntegerField(null=True)),
                ("num_of_volumes", models.IntegerField(default=1)),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LIT-ART", "Literature and Art"),
                            ("FIC", "Fiction"),
                            ("NF", "Non-Fiction"),
                            ("POE", "Poetry"),
                            ("DRA", "Drama"),
                            ("CLA", "Classics"),
                            ("ART", "Art and Photography"),
                            ("COM", "Comics and Graphic Novels"),
                            ("SCI-TECH", "Science and Technology"),
                            ("CS", "Computer Science"),
                            ("ENG", "Engineering"),
                            ("MATH", "Mathematics"),
                            ("PHY", "Physics"),
                            ("BIO", "Biology"),
                            ("CHE", "Chemistry"),
                            ("MED", "Medicine"),
                            ("TECH", "Technology"),
                            ("AST", "Astronomy"),
                            ("AI", "Artificial Intelligence"),
                            ("HIS-BIOG", "History and Biographies"),
                            ("HIS", "History"),
                            ("BIOG", "Biographies"),
                            ("MEM", "Memoirs"),
                            ("PHIL-REL", "Philosophy and Religion"),
                            ("PHIL", "Philosophy"),
                            ("REL", "Religion"),
                            ("SPIR", "Spirituality"),
                            ("ETH", "Ethics"),
                            ("BUS-ECO", "Business and Economics"),
                            ("BUS", "Business"),
                            ("ECO", "Economics"),
                            ("FIN", "Finance"),
                            ("MGT", "Management"),
                            ("MKT", "Marketing"),
                            ("ENT", "Entrepreneurship"),
                            ("SH-PD", "Self-Help and Development"),
                            ("SH", "Self-Help"),
                            ("PSY", "Psychology"),
                            ("PD", "Personal Development"),
                            ("MOT", "Motivation"),
                            ("HF", "Health and Fitness"),
                            ("SOC-SCI", "Social Sciences"),
                            ("SOC", "Sociology"),
                            ("ANTH", "Anthropology"),
                            ("POL", "Political Science"),
                            ("LAW", "Law"),
                            ("EDU", "Education"),
                            ("CH-YA", "Children’s and Young Adult Literature"),
                            ("CHL", "Children’s Literature"),
                            ("YA", "Young Adult"),
                            ("FAN", "Fantasy"),
                            ("ADV", "Adventure"),
                            ("NAT-ENV", "Natural and Environmental Sciences"),
                            ("ENV", "Environmental Sciences"),
                            ("ECO", "Ecology"),
                            ("GEO", "Geology"),
                            ("AGR", "Agriculture"),
                            ("TRV-EXP", "Travel and Exploration"),
                            ("TRV", "Travel"),
                            ("EXP", "Exploration"),
                            ("COOK-NUT", "Cooking and Nutrition"),
                            ("COOK", "Cooking"),
                            ("NUT", "Nutrition"),
                            ("HOB-REC", "Hobbies and Recreation"),
                            ("SPT", "Sports"),
                            ("GAM", "Games"),
                            ("DIY", "DIY and Crafts"),
                            ("MUS", "Music"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("image_url", models.URLField()),
                ("authors", models.ManyToManyField(to="BooksVault.author")),
                (
                    "publisher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="books_published",
                        to="BooksVault.publisher",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="books",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
